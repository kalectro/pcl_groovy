Fix several errors related to the uncompressed Bayer buffer:

From: Roman Donchenko <roman.donchenko@itseez.com>

* Clear it upon frame start.
* Don't let it overflow.
* Report on frame end if it's incomplete or overflowed.
---
 .../XnUncompressedBayerProcessor.cpp               |   42 ++++++++++++++++++--
 .../XnUncompressedBayerProcessor.h                 |    1 
 2 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.cpp b/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.cpp
index 5ac9b7c..f1f6acb 100644
--- a/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.cpp
+++ b/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.cpp
@@ -67,12 +67,21 @@ void XnUncompressedBayerProcessor::ProcessFramePacketChunk(const XnSensorProtoco
 
 	// if output format is Gray8, we can write directly to output buffer. otherwise, we need
 	// to write to a temp buffer.
-	XnBuffer* pWriteBuffer = (GetStream()->GetOutputFormat() == XN_OUTPUT_FORMAT_GRAYSCALE8) ? GetWriteBuffer() : &m_UncompressedBayerBuffer;
 
-	// make sure we have enough room
-	if (CheckWriteBufferForOverflow(nDataSize))
+	if (GetStream()->GetOutputFormat() == XN_OUTPUT_FORMAT_GRAYSCALE8)
 	{
-		pWriteBuffer->UnsafeWrite(pData, nDataSize);
+		XnBuffer* pWriteBuffer = GetWriteBuffer();
+
+		// make sure we have enough room
+		if (CheckWriteBufferForOverflow(nDataSize))
+			pWriteBuffer->UnsafeWrite(pData, nDataSize);
+	}
+	else
+	{
+		XnBuffer* pWriteBuffer = &m_UncompressedBayerBuffer;
+
+		if (pWriteBuffer->Write(pData, nDataSize) != XN_STATUS_OK)
+			xnLogWarning(XN_MASK_SENSOR_PROTOCOL_IMAGE, "Uncompressed buffer overflow");
 	}
 
 	XN_PROFILING_END_SECTION
@@ -90,7 +99,18 @@ void XnUncompressedBayerProcessor::OnEndOfFrame(const XnSensorProtocolResponseHe
 		case XN_OUTPUT_FORMAT_RGB24:
 			{
 				Bayer2RGB888(m_UncompressedBayerBuffer.GetData(), GetWriteBuffer()->GetUnsafeWritePointer(), GetActualXRes(), GetActualYRes(), 1, 0);
-				GetWriteBuffer()->UnsafeUpdateSize(GetActualXRes()*GetActualYRes()*3);
+
+				XnUInt32 frame_size;
+
+				// if the frame was corrupted, propagate the corruption into the write buffer
+				if (m_UncompressedBayerBuffer.GetSize() < GetActualXRes()*GetActualYRes())
+					frame_size = m_UncompressedBayerBuffer.GetSize() * 3;
+				else if (m_UncompressedBayerBuffer.GetSize() > GetActualXRes()*GetActualYRes())
+					frame_size = 0; // overflows are failures too
+				else
+					frame_size = GetActualXRes()*GetActualYRes()*3;
+
+				GetWriteBuffer()->UnsafeUpdateSize(frame_size);
 				m_UncompressedBayerBuffer.Reset();
 			}
 			break;
@@ -100,3 +120,15 @@ void XnUncompressedBayerProcessor::OnEndOfFrame(const XnSensorProtocolResponseHe
 
 	XN_PROFILING_END_SECTION
 }
+
+void XnUncompressedBayerProcessor::OnStartOfFrame(const XnSensorProtocolResponseHeader* pHeader)
+{
+	XN_PROFILING_START_SECTION("XnUncompressedBayerProcessor::OnStartOfFrame")
+
+	XnImageProcessor::OnStartOfFrame(pHeader);
+
+	if (GetStream()->GetOutputFormat() == XN_OUTPUT_FORMAT_RGB24)
+		m_UncompressedBayerBuffer.Reset();
+
+	XN_PROFILING_END_SECTION
+}
diff --git a/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.h b/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.h
index 0491c09..3586172 100644
--- a/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.h
+++ b/Source/XnDeviceSensorV2/XnUncompressedBayerProcessor.h
@@ -45,6 +45,7 @@ public:
 protected:
 	virtual void ProcessFramePacketChunk(const XnSensorProtocolResponseHeader* pHeader, const XnUChar* pData, XnUInt32 nDataOffset, XnUInt32 nDataSize);
 	virtual void OnEndOfFrame(const XnSensorProtocolResponseHeader* pHeader);
+	virtual void OnStartOfFrame(const XnSensorProtocolResponseHeader* pHeader);
 
 	//---------------------------------------------------------------------------
 	// Class Members
