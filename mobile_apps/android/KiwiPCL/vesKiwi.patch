diff --git a/src/kiwi/vesKiwiViewerApp.cpp b/src/kiwi/vesKiwiViewerApp.cpp
index ff39537..eca8c9f 100644
--- a/src/kiwi/vesKiwiViewerApp.cpp
+++ b/src/kiwi/vesKiwiViewerApp.cpp
@@ -53,7 +53,8 @@
 #include <vtkImageData.h>
 #include <vtkPointData.h>
 
-
+#include<vtkShortArray.h>
+ 
 #include <vtksys/SystemTools.hxx>
 
 #include <cassert>
@@ -124,6 +125,8 @@ public:
   vesSharedPtr<vesShaderProgram> TextureShader;
   vesSharedPtr<vesShaderProgram> GouraudTextureShader;
   vesSharedPtr<vesShaderProgram> ClipShader;
+  vesSharedPtr<vesShaderProgram> PointCloudShader;
+
   vesSharedPtr<vesUniform> ClipUniform;
 
   std::vector<vesKiwiDataRepresentation*> DataRepresentations;
@@ -171,10 +174,9 @@ vesKiwiViewerApp::vesKiwiViewerApp()
   this->Internal = new vesInternal();
   this->Internal->CameraSpinner->setInteractor(this->cameraInteractor());
   this->resetScene();
-
-  this->addBuiltinDataset("Utah Teapot", "teapot.vtp");
-  this->addBuiltinDataset("Stanford Bunny", "bunny.vtp");
-  this->addBuiltinDataset("NLM Visible Woman Hand", "visible-woman-hand.vtp");
+  this->addBuiltinDataset("ICP Projective Correspondance", "teapot.vtp");
+  this->addBuiltinDataset("PCL ICP", "bunny.vtp");
+/*  this->addBuiltinDataset("NLM Visible Woman Hand", "visible-woman-hand.vtp");
   this->addBuiltinDataset("NA-MIC Knee Atlas", "AppendedKneeData.vtp");
 
   this->addBuiltinDataset("ROS C Turtle", "cturtle.vtp");
@@ -197,7 +199,7 @@ vesKiwiViewerApp::vesKiwiViewerApp()
     vesVector3f(1.,0.,0.), vesVector3f(0.,0.,-1.));
 
   this->addBuiltinDataset("KiwiViewer Logo", "kiwi.png");
-
+*/
   // These depend on external data, so are commented out for now.
   //this->addBuiltinDataset("SPL-PNL Brain Atlas", "model_info.txt");
   //this->addBuiltinDataset("Can Simulation", "can0000.vtp");
@@ -208,6 +210,7 @@ vesKiwiViewerApp::vesKiwiViewerApp()
   this->initToonShader(
     vesBuiltinShaders::vesToonShader_vert(),
     vesBuiltinShaders::vesToonShader_frag());
+
   this->initGouraudShader(
     vesBuiltinShaders::vesShader_vert(),
     vesBuiltinShaders::vesShader_frag());
@@ -259,7 +262,7 @@ int vesKiwiViewerApp::numberOfBuiltinDatasets() const
 //----------------------------------------------------------------------------
 int vesKiwiViewerApp::defaultBuiltinDatasetIndex() const
 {
-  return 6;
+  return 0;
 }
 
 //----------------------------------------------------------------------------
@@ -629,6 +632,18 @@ bool vesKiwiViewerApp::initClipShader(const std::string& vertexSource, const std
   return true;
 }
 
+ void vesKiwiViewerApp::initPointCloudShader(const std::string& vertexSource, const std::string fragmentSource)
+  {
+   vesShaderProgram::Ptr mShader = this->addShaderProgram(vertexSource, fragmentSource);
+    this->addModelViewMatrixUniform(mShader);
+    this->addProjectionMatrixUniform(mShader);
+    this->addVertexPositionAttribute(mShader);
+    this->addNormalMatrixUniform(mShader);
+    this->addVertexNormalAttribute(mShader);
+    this->addVertexColorAttribute(mShader);
+
+	this->Internal->PointCloudShader=mShader;
+  }
 //----------------------------------------------------------------------------
 void vesKiwiViewerApp::resetScene()
 {
@@ -728,7 +743,8 @@ void vesKiwiViewerApp::setBackgroundTexture(const std::string& filename)
 //----------------------------------------------------------------------------
 void vesKiwiViewerApp::setDefaultBackgroundColor()
 {
-  this->setBackgroundColor(63/255.0, 96/255.0, 144/255.0);
+//  this->setBackgroundColor(63/255.0, 96/255.0, 144/255.0);
+this->setBackgroundColor(0.0, 0.0, 0.0);
 }
 
 //----------------------------------------------------------------------------
@@ -835,6 +851,51 @@ bool vesKiwiViewerApp::loadDataset(const std::string& filename)
   return true;
 }
 
+
+vesGeometryData::Ptr CreateGeometryData(vtkShortArray* points, vtkUnsignedCharArray* colors)
+{
+  const int numberOfPoints = points->GetNumberOfTuples()*points->GetNumberOfComponents() / 3;
+
+  vesSharedPtr<vesGeometryData> output(new vesGeometryData());
+  vesSourceDataP3f::Ptr sourceData(new vesSourceDataP3f());
+
+  vesVertexDataP3f vertexData;
+  for (int i = 0; i < numberOfPoints; ++i) {
+    vertexData.m_position[0] = points->GetValue(i*3 + 0);
+    vertexData.m_position[1] = points->GetValue(i*3 + 1);
+    vertexData.m_position[2] = points->GetValue(i*3 + 2);
+    sourceData->pushBack(vertexData);
+  }
+
+  output->addSource(sourceData);
+  output->setName("PolyData");
+
+  vesPrimitive::Ptr pointPrimitive (new vesPrimitive());
+  pointPrimitive->setPrimitiveType(vesPrimitiveRenderType::Points);
+  pointPrimitive->setIndexCount(1);
+  output->addPrimitive(pointPrimitive);
+
+
+  vesKiwiDataConversionTools::SetVertexColors(colors, output);
+  return output;
+}
+
+
+bool vesKiwiViewerApp::loadPCLPointCloud(vtkShortArray* points, vtkUnsignedCharArray* colors)
+{
+        this->GeometryData=CreateGeometryData(points, colors);
+	vesKiwiPolyDataRepresentation* rep = new vesKiwiPolyDataRepresentation();
+	rep->initializeWithShader(this->Internal->PointCloudShader);
+	rep->mapper()->setGeometryData(this->GeometryData);
+
+	rep->addSelfToRenderer(this->renderer());
+
+	this->Internal->DataRepresentations.push_back(rep);
+
+	return true;
+}
+
+
 //----------------------------------------------------------------------------
 void vesKiwiViewerApp::setErrorMessage(const std::string& errorTitle, const std::string& errorMessage)
 {
diff --git a/src/kiwi/vesKiwiViewerApp.h b/src/kiwi/vesKiwiViewerApp.h
index e75a8f7..cea55c0 100644
--- a/src/kiwi/vesKiwiViewerApp.h
+++ b/src/kiwi/vesKiwiViewerApp.h
@@ -30,6 +30,17 @@
 // C++ includes
 #include <string>
 
+
+#include <vtkLookupTable.h>
+#include <vtkCellArray.h>
+#include <vtkIntArray.h>
+
+#include "vesGeometryData.h"
+
+#include <vtkNew.h>
+#include<vtkShortArray.h>
+
+
 // Forward declarations
 class vesCamera;
 class vesKiwiCameraSpinner;
@@ -47,6 +58,8 @@ class vtkDataSet;
 class vtkPolyData;
 class vtkImageData;
 
+
+
 class vesKiwiViewerApp : public vesKiwiBaseApp
 {
 public:
@@ -55,6 +68,8 @@ public:
   vesKiwiViewerApp();
   ~vesKiwiViewerApp();
 
+  vesGeometryData::Ptr GeometryData;
+
   int numberOfBuiltinDatasets() const;
   int defaultBuiltinDatasetIndex() const;
   std::string builtinDatasetName(int index);
@@ -81,6 +96,9 @@ public:
   bool initTextureShader(const std::string& vertexSource, const std::string& fragmentSource);
   bool initGouraudTextureShader(const std::string& vertexSource, const std::string& fragmentSource);
   bool initClipShader(const std::string& vertexSource, const std::string& fragmentSource);
+  
+
+void initPointCloudShader(const std::string& vertexSource, const std::string fragmentSource);
 
   bool isAnimating() const;
   void setBackgroundTexture(const std::string& filename);
@@ -122,6 +140,11 @@ public:
   /// Return the spinner instance used to implement camera rotation inertia.
   vesSharedPtr<vesKiwiCameraSpinner> cameraSpinner() const;
 
+  vesKiwiText2DRepresentation* addTextRepresentation(const std::string& text);  //this method was in protected list, but I put it in public list because it neccessary to output some text from applications without rebuild library 
+  void resetScene(); // moved from protected
+  bool loadPCLPointCloud(vtkShortArray* points, vtkUnsignedCharArray* colors);
+ 
+
 protected:
 
   virtual void willRender();
@@ -137,11 +160,9 @@ protected:
 
   void setAnimating(bool animating);
 
-  void resetScene();
-
   vesKiwiPolyDataRepresentation* addPolyDataRepresentation(
     vtkPolyData* polyData, vesSharedPtr<vesShaderProgram> program);
-  vesKiwiText2DRepresentation* addTextRepresentation(const std::string& text);
+
   vesKiwiPlaneWidget* addPlaneWidget();
   bool loadBrainAtlas(const std::string& filename);
   bool loadCanSimulation(const std::string& filename);
